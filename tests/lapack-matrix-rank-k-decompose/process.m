clear all;
format long;

M=[
   1.00000    4.00000    7.00000   10.00000   13.00000 
   2.00000    5.00000    8.00000   11.00000   14.00000 
   3.00000    6.00000    9.00000   12.00000   15.00000 ];

printf("* k=1, left associative\n");

A=[
   -1.8269385571e+01 
   -2.0248343123e+01 
   -2.2227300674e+01 ];
B=[
   -1.0134599632e-01 
   -2.4856875332e-01 
   -3.9579151032e-01 
   -5.4301426732e-01 
   -6.9023702432e-01 ];

A * B'
printf("Frobenius norm of M - A*B^T: %g\n", norm(M - A * B', 'fro'));

printf("* k=1, right associative\n");

A=[
   -5.1927260844e-01 
   -5.7552072066e-01 
   -6.3176883289e-01 ];
B=[
   -3.5656205484e+00 
   -8.7453070344e+00 
   -1.3924993520e+01 
   -1.9104680006e+01 
   -2.4284366492e+01 ];

A * B'
printf("Frobenius norm of M - A*B^T: %g\n", norm(M - A * B', 'fro'));

printf("* k=2, left associative\n");

A=[
   -1.8269385571e+01     1.1088511392e+00 
   -2.0248343123e+01     6.7829040961e-02 
   -2.2227300674e+01    -9.7319305724e-01 ];
B=[
   -1.0134599632e-01    -7.6793814141e-01 
   -2.4856875332e-01    -4.8807128052e-01 
   -3.9579151032e-01    -2.0820441964e-01 
   -5.4301426732e-01     7.1662441245e-02 
   -6.9023702432e-01     3.5152930213e-01 ];

A * B'
printf("Frobenius norm of M - A*B^T: %g\n", norm(M - A * B', 'fro'));

printf("* k=2, right associative\n");

A=[
   -5.1927260844e-01     7.5079244233e-01 
   -5.7552072066e-01     4.5926391312e-02 
   -6.3176883289e-01    -6.5893965970e-01 ];
B=[
   -3.5656205484e+00    -1.1341737542e+00 
   -8.7453070344e+00    -7.2083623234e-01 
   -1.3924993520e+01    -3.0749871054e-01 
   -1.9104680006e+01     1.0583881127e-01 
   -2.4284366492e+01     5.1917633308e-01 ];

A * B'
printf("Frobenius norm of M - A*B^T: %g\n", norm(M - A * B', 'fro'));


printf("* k=3, left associative\n");

A=[
   -1.8269385571e+01     1.1088511392e+00     3.3140029432e-16 
   -2.0248343123e+01     6.7829040961e-02    -6.6280058865e-16 
   -2.2227300674e+01    -9.7319305724e-01     3.3140029432e-16 ];
B=[
   -1.0134599632e-01    -7.6793814141e-01     4.7398376948e-01 
   -2.4856875332e-01    -4.8807128052e-01    -8.3645472878e-01 
   -3.9579151032e-01    -2.0820441964e-01     2.5444532374e-01 
   -5.4301426732e-01     7.1662441245e-02     1.0453846092e-01 
   -6.9023702432e-01     3.5152930213e-01     3.4871746325e-03 ];

A * B'
printf("Frobenius norm of M - A*B^T: %g\n", norm(M - A * B', 'fro'));

printf("* k=3, right associative\n");

A=[
   -5.1927260844e-01     7.5079244233e-01     4.0824829046e-01 
   -5.7552072066e-01     4.5926391312e-02    -8.1649658093e-01 
   -6.3176883289e-01    -6.5893965970e-01     4.0824829046e-01 ];
B=[
   -3.5656205484e+00    -1.1341737542e+00     3.8476183338e-16 
   -8.7453070344e+00    -7.2083623234e-01    -6.7900184711e-16 
   -1.3924993520e+01    -3.0749871054e-01     2.0654894864e-16 
   -1.9104680006e+01     1.0583881127e-01     8.4860310568e-17 
   -2.4284366492e+01     5.1917633308e-01     2.8307545349e-18 ];

A * B'
printf("Frobenius norm of M - A*B^T: %g\n", norm(M - A * B', 'fro'));
